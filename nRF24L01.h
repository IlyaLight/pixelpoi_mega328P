/*
 * nRF24L0.h
 *
 * Created: 22.10.2016 22:46:41
 *  Author: Light
 */ 
#ifndef NRF24L01
#define NRF24L01

#include <avr/io.h>

//===================================
//----- nRF24L0+ port ----
//===================================
#define DDR_nRF_IRQ		DDRC
#define PORT_nrf_IRQ	PORTC
#define PIN_nrf_IEQ		PINC
#define IRQ	0
#define DDR_nRF_CE		DDRC
#define PORT_nrf_CE		PORTC 
#define CE	1
#define DDR_nRF_CSN		DDRB
#define PORT_nrf_CSN	PORTB
#define CSN 2


/*
		IRQ			—	выход прерывания. Когда все пучком, то нога находится 
						прижатой к питанию (высокий уровень). Но как только что нибудь
						произошло, например их космоса/в космос поймали/отправили
						байт, или байт не отправился, то этот пин сразу падает на
						землю. Как тока он упал, надо все бросить и считать регистр
						STATUS. И в этом регистре уже конкретно видно что произошло.
						Это видно из трех битов-флагов — RX_DR, TX_DS, MAX_RT. Что они
						означают выше прокомментировано. Как только стало ясно какие
						биты равны значению 1, их тут же надо сбросить, записью 1.
						Иначе нога IRQ всегда будет лежать на земле. Причем сбросить
						надо только те биты в которых значение 1. Те в которых 0
						писать ничего ненадо, ну 0 можно записать, но не 1. Иначе IRQ
						опять упадет на землю.

		CE			—	вход. Если модуль в режиме приема, то СЕ прижимаем к 
						питанию. Если режим передачи, то СЕ лежит на земле. И когда
						надо передать байт, СЕ поднимаем к питанию не менее чем на 10
						мксек, потом снова прижимаем к земле. Байт улетел в пространство.

		CSN			—	вход. Всегда находится прижатым к питанию. Если надо что 
						то записать/считать в радио модуль, то перед началом любых 
						телодвижений прижимаем к земле. Записали/считали — прижимаем 
						снова к питанию.

 CSK, MOSI, MISO	—	пины SPI интерфейса. Подключаются к 
						одноименным выводам МК. MISO определяем на вход, MOSI, CSK 
						на выход. Все это делаем ручками, так как при включения 
						интерфейса SPI эти выводы сами по себе не переопределяются по 
						назначению.
*/

//===============================
//-----------Регистры------------
//===============================

/*0x00 			CONFIG 
Регистр настроек.*/
#define CONFIG          0x00
							/*маскировка источников прерываний. При установке одного из 
							этих бит в единицу, соответствующее событие и установка 
							соответствующего б ита в регистре STATUS не будет генерировать 
							сигнал прерывания на линии IRQ.*/
#define MASK_RX_DR		6	//вкл/откл прерывание от бита RX_DR в рег. STATUS. 0-вкл, 1-выкл.
#define MASK_TX_DS		5	//вкл/откл прерывание от бита TX_DS в рег. STATUS. 0-вкл, 1-выкл.
#define MASK_MAX_RT		4	//вкл/откл прерывание от бита MAX_RT в рег. STATUS. 0-вкл, 1-выкл.
#define EN_CRC			3	/*включает расчёт контрольной суммы (CRC). Если включено 
							автоподтверждение приёма путём установки хотя бы одного бита в 
							регистре EN_AA, то значение этого бита устанавливается в единицу 
							автоматически.*/
#define CRCO			2	/*Определяет размер поля контрольной суммы (CRC): 0 - 1 байт; 
							1 - 2 байта*/
#define PWR_UP			1	/*Включает питание. Если этот бит равен нулю, то чип находится в 
							режиме отключения, и потребляет около 0,9мкА, в таком режиме 
							радиообмен невозможен. После включения питания до начала работы 
							в режиме приёмника или передатчика (т.е. до выставления высокого 
							уровня на линии CE) необходимо выдержать паузу, достаточную для 
							выхода осциллятора на режим, типично 1.5мс (подробнее см. в разделе 
							"Необходимые временные задержки").*/
#define PRIM_RX			0	/*Выбор режима: 0 - PTX (передатчик) 1 - PRX (приёмник).Если переход 
							в режим передатчика осуществляется сразу после завершения приёма 
							пакета (появления прерывания RX_DR), и автоматическое подтверждение 
							приёма включено, то необходимо обеспечить паузу с момента появления 
							прерывания до перевода в режим PTX, во время которой чип отправит пакет 
							подтверждения, типично не более 203 мкс (подробнее см. в разделе 
							"Необходимые временные задержки").*/

/*0x01 			EN_AA
---------------------- 		
Включает автоподтверждение приёма.
ENAA_Px - установка бита включает автоматическую отправку подтверждения приёма данных по 
соответствующему каналу.*/
#define EN_AA       0x01
#define	ENAA_P5		5		
#define	ENAA_P4		4
#define	ENAA_P3		3
#define	ENAA_P2		2
#define	ENAA_P1		1	
#define	ENAA_P0		0

/*0x02 			EN_RXADDR
---------------------- 	
Выбирает активные каналы приёмника.
ERX_Px - включает приём данных по соответствующему каналу.
При использовании устройства в качестве передатчика с включенной функцией автоподтверждения, ответ 
от удалённого устройства принимается на канале 0. Поэтому бит ERX_P0 должен быть установлен в 1, для 
использования передачи с автоподтвреждением.*/
#define EN_RXADDR   0x02
#define	ERX_P5		5	
#define	ERX_P4		4					
#define	ERX_P3		3
#define	ERX_P2		2
#define	ERX_P1		1	
#define	ERX_P0		0

/*0x03 			SETUP_AW
----------------------		
Задаёт длину поля адреса.
AW - два бита, задающие длину поля адреса: 01 - 3 байта; 10 - 4 байта; 11 - 5 байт.
Эта настройка влияет на передачу и приём пакетов по всем каналам. Данная настройка у передающего и 
принимающего устройств должна быть идентичной.*/
#define SETUP_AW    0x03
#define AW 			0

/*0x04 			SETUP_RETR
----------------------	
Настройка параметров автоматического повтора отправки.
ARD - четыре бита, задающие время ожидания подтверждения приёма перед повторной отправкой: 0000 - 
250мкс; 0001 - 500мкс; 0010 - 750мкс; ... ; 1111 - 4000мкс; Значение поля ARD необходимо выбирать 
в зависимости от скорости обмена и количества данных, передаваемых с пакетом подтверждения. Если 
данные с пакетом подтверждения не передаются, то для скоростей обмена 1 и 2 Мбит/с достаточное 
время ожидания 250мкс. Если вместе с пакетом подтверждения на скорости 1Мбит/с передаётся более 
5 байт данных, или более 15 на скорости 2Мбит/с, или скорость обмена выбрана 250кбит/с, то необходимо 
выбрать паузу 500мкс.
ARC - четыре бита, задающие количество автоматических повторов отправки. 0000 - автоповтор отключен; 
0001 - возможен однократный повтор; ... ; 1111 - возможно до 15 повторов.*/
#define SETUP_RETR  0x04
#define ADR 		4
#define	ARC 		0

/*0x05 			RF_CH
----------------------		
Регистр задаёт номер радиоканала 
- частоту несущей с шагом 1Мгц. Радиочастота несущей вычисляется по формуле 2400 + RF_CH МГц. 
Допустимые значения от 0 до 125. При обмене на скорости 2Мбит/с, частота должна отличатся от частоты 
используемой другими устройствами минимум на 2 МГц.*/
#define RF_CH       0x05

/*0x06 			RF_SETUP
---------------------- 	
Задаёт настройки радиоканала.*/
#define RF_SETUP    0x06
#define CONT_WAVE 	7		//Непрерывная передача несущей. Предназначено для тестирования
#define RF_DR_LOW 	5		/*Включает низкую скорость передачи 250кбит/с. При этом бит RF_DR_HIGH 
							должен быть 0*/
#define PLL_LOCK    4		//предназначено для тестирования.
#define RF_DR       3		/*Выбор скорости обмена (при значении бита RF_DR_LOW = 0): 0 - 1Мбит/с; 
							1 - 2Мбит/с*/
#define RF_PWR      1 		/* бита, задающих мощность передатчика: 00 - -18dBm; 01 - -12dBm; 
							10 - -6dBm; 11 - 0dBm*/

/*0x07			STATUS
---------------------- 		
Регистр статуса. 
Его значение также передаётся на линии MISO одновременно с передачей байта команды по интерфейсу 
SPI.*/
#define STATUS     	0x07
#define RX_DR       6		/*Прерывание по получению пакета. Бит устанавливается в единицу, 
							когда усройство в режиме приняло адресованый ему пакет с совпавшей 
							контрольной суммой. Бит сбрасывается путём записи в него значения 1. 
							Принятый пакет доступен в очереди приёмника, и может быть прочитан 
							командой R_RX_PAYLOAD, либо удалён командой FLUSH_RX.*/
#define TX_DS       5		/*Прерывание по успешной отправке пакета. Бит устанавливается в 
							единицу, когда устройство в режиме передатчика успешно отправило пакет 
							и, если включено автоподтверждение, приняло подтверждение получения. 
							После успешной отправки пакет удаляется из очереди передатчика. 
							Бит сбрасывается путём записи в него значения 1.*/
#define MAX_RT      4		/*Прерывание по превышению числа попыток повторной отправки. Бит 
							устанавливается в единицу, когда устройство в режиме передатчика 
							предприняло заданное в регистре SETUP_RETR количество попыток отправки,
							но так и не получило подтверждение от удалённого устройства. 
							Передаваемый пакет остаётся в очереди передатчика. Для удаления его 
							можно воспользоваться командой FLUSH_TX. Дальнейшая коммуникация 
							невозможна, пока этот бит установлен. Бит сбрасывается путём записи 
							в него значения 1. Пока любой из бит RX_DR, TX_DS, MAX_RT установлен 
							в единицу и соответствующее ему прерывание не запрещено (т.е. 
							соответствующие из бит MASK_RX_DR, MASK_TX_DS, MASK_MAX_RT в регистре
							CONFIG равны нулю), то на выходе IRQ чипа устанавливается низкий 
							уровень. Для сброса значений этих бит, необходимо записать регистр 
							STATUS с этими битами, установленными в 1.*/	
#define RX_P_NO		1		/*три бита кодирующие номер канала, пакет по которому доступен в 
							начале очереди приёмника для чтения. Значения 000 - 101 кодируют каналы 
							с 0 по 5, соответственно, значение 111 указывает, что очередь приёмника 
							пуста.*/
#define TX_FULL_STATUS	0	/*значение 1 этого бита показывает, что в очереди передатчика нет 
							свободных слотов.*/

/*0x08 			OBSERVE_TX
---------------------- 
Регистр контроля передатчика*/
#define OBSERVE_TX	0x08
#define PLOS_CNT	4		/*четыре бита, значение которых увеличивается, вплоть до достижения 
							15, при каждой отправке, на которую не получено ожидаемое 
							подтверждение. Значение сбрасывается при записи в регистр RF_CH.*/
#define ARC_CNT		0		/*четыре бита, возвращающие количество предпринятых повторов 
							отправки при передаче последнего пакета. Сбрасывается в 0, когда 
							начинается отправка очередного пакета.*/

/*0x09			RPD
---------------------- 
Оценка мощности принимаемого сигнала*/
#define	RPD			0x09	/*RPD - младший бит принимает значение 1, если чип находится в 
							режиме приёмника, и уровень принимаемого сигнала превышает -64dBm*/

/*0x0A			RX_ADDR_P0
----------------------
40-битный (5 байт) регистр, используемый для указания адреса канала 0 приёмника. Этот канал 
используется для приёма автоподтверждений в режиме передатчика. Автоподтверждения высылаются 
принимающей стороной с указанием собственного адреса. Поэтому значение этого регистра должно 
соответствовать значению регистра TX_ADDR для корректной работы в режиме передатчика.
Реальная используемая ширина адреса задаётся в регистре SETUP_AW.
Значение регистра записывается и читается, начиная с младших байт. Если записано менее 5 байт, 
то старшие байты остаются неизменными.
Значение регистра по умолчанию: 0xE7E7E7E7E7*/
#define RX_ADDR_P0	0x0A

/*0x0B 			RX_ADDR_P1
---------------------- 
40-битный (5 байт) регистр, используемый для указания адреса канала 1 приёмника. Старшие 4 
байта этого регистра являются общими для адресов на каналах 1 - 5.
Реальная используемая ширина адреса задаётся в регистре SETUP_AW.
Значение регистра записывается и читается, начиная с младших байт. Если записано менее 5 байт, 
то старшие байты остаются неизменными.
Значение регистра по умолчанию: 0xC2C2C2C2C2*/
#define RX_ADDR_P1	0x0B

/*0x0C-0x0F		RX_ADDR_P2 - RX_ADDR_P5
----------------------
8-битные регистры, задающие значения младшего байта адреса для каналов 2-5. Значения старших 32 
бит берутся из регистра RX_ADDR_P1. Значение регистров по умолчанию: 0xC3, 0xC4, 0xC5, 0xC6, 
соответственно.*/
#define RX_ADDR_P2	0x0C
#define RX_ADDR_P3	0x0D
#define RX_ADDR_P4	0x0E
#define RX_ADDR_P5	0x0F

/*0x10			TX_ADDR
----------------------
40-битный (5 байт) регистр, используемый в режиме передатчика в качестве адреса удалённого 
устройства. При включенном режиме автоподтверждения, удалённое устройство ответит подтверждением 
с указанием своего же адреса. Это подтверждение принимается на канале 0, поэтому для успешной 
передачи, значение регистра RX_ADDR_P0 должно быть идентично этому.
Реальная используемая ширина адреса задаётся в регистре SETUP_AW.
Значение регистра записывается и читается, начиная с младших байт. Если записано менее 5 байт, то 
старшие байты остаются неизменными.
Значение регистра по умолчанию: 0xE7E7E7E7E7*/
#define TX_ADDR		0x10

/*0x11-0x16		RX_PW_P0 - RX_PW_P5
----------------------
8-битные регистры, задающие размер данных, принимаемых по каналам, соответственно 0-5, если не 
включена поддержка произвольной длины пакетов в регистрах DYNPD и FEATURE. Значение 0 указывает 
что канал не используется. Допустимы значения длины от 1 до 32.*/
#define RX_PW_P0    0x11
#define RX_PW_P1	0x12
#define RX_PW_P2	0x13
#define RX_PW_P3	0x14
#define RX_PW_P4	0x15
#define RX_PW_P5	0x16

/*0x17 			FIFO_STATUS
----------------------		
Состояние очередей FIFO приёмника и передатчика*/
#define FIFO_STATUS	0x17
#define TX_REUSE	6		/*Признак готовности последнего пакета для повтрной отправки. 
							Устанавливается командой REUSE_TX_PL.*/
#define FIFO_FULL	5		/*Флаг переполнения FIFO очереди передатчика: 0 - есть свободное 
							место в очереди; 1 - очередь переполнена.*/
#define TX_EMPTY	4		/*Флаг освобождения FIFO очереди передатчика: 0 - в очереди есть 
							анные; 1 - очередь пуста.*/
#define RX_FULL_FIFO 1		/*Флаг переполнения FIFO очереди приёмника: 0 - есть свободное 
							место в очереди; 1 - очередь переполнена.*/
#define RX_EMPTY	0		/*Флаг освобождения FIFO очереди приёмника: 0 - в очереди есть 
							данные; 1 - очередь пуста.*/

/*0x1C 			DYNPD
----------------------	
Разрешение использования пакетов произвольной длины.
DPL_Px разрешает приём пакетов произвольной длины по соответствующему каналу. При этом такая
опция должна быть включена установленным битом EN_DPL в регистре FEATURE, а также включено 
автоподтверждение установкой соответствующего бита ENAA_Px в регистре EN_AA
В случае если бит принимает значение 0, то размер данных в принимаемых пакетах должен быть равен 
значению соответствующего регистра RX_PW_Px*/
#define DYNPD		0x1C
#define DPL_P5		5
#define DPL_P4		4
#define DPL_P3		3
#define DPL_P2		2
#define DPL_P1		1
#define DPL_P0 		0

/*0x1D 			FEATURE
----------------------	
Регистр опций*/
#define FEATURE 	0x1D
#define EN_DPL 		2		/*включает поддержку приёма и передачи пакетов с размером поля 
							данных произвольной длины.В этом случае приём пакетов произвольной 
							длины по каналам должен быть разрешён в регистре DYNPD и включено 
							автоподтверждение в регистре EN_AA. Если опция отключена, то размер 
							принимаемых данных задаётся значением регистров RX_PW_P0 - RX_PW_P5.
							При передаче также передаётся поле, указывающее длительность пакета. 
							Длина передаваемого пакета определяется размером записанных командой 
							W_TX_PAYLOAD данных и она должна соответствовать настройкам 
							принимающей стороны.*/
#define EN_ACK_PAY	1		/*включает поддержку передачи данных с пакетами подтверждения.
							После включения этой опции, командой W_ACK_PAYLOAD в очередь передатчика 
							могут быть помещены данные, которые будут отправлены вместе с пакетом 
							подтверждения приёма.*/
#define	EN_DYN_ACK	0		/*разрешает передавать пакеты, не требующие подтверждения приёма.
							После включения этой опции, командой W_TX_PAYLOAD_NOACK в очередь 
							передатчика могут быть помещены данные, на которые удалённой стороне 
							не требуется присылать подтверждение о приёме.*/


//===============================
//--------Описание команд--------
//===============================

//		Command name	|	Command word	|  # Data bytes		| Operation

#define R_REGISTER			0b00000000		// 1 to 5			Read command 
						//    000AAAAA		   LSByte first1	and status registers. 0b000AAAAA 
											//					AAAAA = 5 bit Register Map Address
										
#define W_REGISTER          0b00100000		// 1 to 5			Write command and status registers. 
#define REGISTER_MASK		0x1F			//    001AAAAA		   LSByte first		AAAAA = 5 bit Register 
											//					Map Address Executable in power down 
											//					or standby. 1 to 5 LSByte first
										
#define R_RX_PAYLOAD		0b01100001		// 1 to 32			Read RX-payload: 1 – 32 bytes. A read operation
											// LSByte first		always starts at byte 0. Payload is deleted from
																//FIFO after it is read. Used in RX mode.
											
#define W_TX_PAYLOAD        0b10100000		// 1 to 32			Write TX-payload: 1 – 32 bytes. A write operation
											// LSByte first		always starts at byte 0 used in TX payload
											
#define FLUSH_TX            0b11100001		// 0				Flush TX FIFO, used in TX mode

#define FLUSH_RX            0b11100010		// 0				Flush RX FIFO, used in RX mode
											//					Should not be executed during transmission of
											//					acknowledge, that is, acknowledge package will
											//					not be completed.
											
#define REUSE_TX_PL			0b11100011		// 0				Used for a PTX device
											//					Reuse last transmitted payload.
											//					TX payload reuse is active until
											//					W_TX_PAYLOAD or FLUSH TX is executed. TX
											//					payload reuse must not be activated or deactivated 
											//					during package transmission.

#define ACTIVATE	        0b01100000		// 1				Read RX payload width for the top
											//					R_RX_PAYLOAD in the RX FIFO.
											//					Note: Flush RX FIFO if the read value is larger
											//					than 32 bytes.
										
#define R_RX_PL_WID			0b10101000		// 1 to 32			Used in RX mode.
						//	  10101PPP		   LSByte first		Write Payload to be transmitted together with
											//					ACK packet on PIPE PPP. (PPP valid in the
											//					range from 000 to 101). Maximum three ACK
											//					packet payloads can be pending. Payloads with
											//					same PPP are handled using first in - first out
											//					principle. Write payload: 1– 32 bytes. A write
											//					operation always starts at byte 0
											
#define W_TX_PAYLOAD_NO_ACK	0b10110000		// 1 to 32			Used in TX mode. Disables AUTOACK on this
											// LSByte first		specific packet
											   
#define NOP					0b11111111		// 0				No Operation. Might be used to read the STATUS


#endif

